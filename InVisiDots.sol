// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts@4.7.3/token/ERC20/ERC20.sol"; //imported basic ERC-20 functionalities
import "@openzeppelin/contracts@4.7.3/token/ERC20/extensions/ERC20Burnable.sol"; //imported for burnable property of tokens
import "@openzeppelin/contracts@4.7.3/security/Pausable.sol"; //imported for pausable property of transactions of tokens
import "@openzeppelin/contracts@4.7.3/access/Ownable.sol"; //imported to add ownable property to token

contract InVisiDots is ERC20, ERC20Burnable, Pausable, Ownable {
    uint randNonce = 0;
    constructor() ERC20("InVisiDots", "IVD") 
    {
        _mint(msg.sender, 100  ** 7);
        transfer(0x09F59a58169B42e426a6398b167128F4AD4cC0dF,10 ** 7);
    }

    /**
    * @dev Allows admin to pause the transactions and minting of tokens
    */
    function pause() public onlyOwner {
        _pause();
    }

    /**
    * @dev Allows admin to resume the transactions and minting of tokens
    */
    function unpause() public onlyOwner {
        _unpause();
    }

    /**
    * @dev Allows admin to mint new tokens for an account
    * @param to Address of the account to be transferred new tokens
    * @param amount amount of new tokens to be minted
    */
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    /**
    * @dev Allows anyone to generate a random in a given range
    * @param _modulus specifies the range or the mod of random numbers to be generated
    */
    function randMod(uint _modulus) internal returns(uint)
    {
        randNonce++; 
        return uint(keccak256(abi.encodePacked(block.timestamp,msg.sender,randNonce))) % _modulus;
    }

    /**
    * @dev Gambling game : users chooses a number upto 6 if the same is generated by the function then the user is rewarded.
    * @param a number selected by the user
    */
    function game(uint256 a) public returns(bool)
    {
        require(a < 6 ,"Please select a number less than 6");
        uint g = randMod(6);
        if(a == g)
        {
            _mint(msg.sender,10);
            return true;
        }
        else{
            _burn(msg.sender,7);
            return false;
        }
    }
}
